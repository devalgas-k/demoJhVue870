package com.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ExperienceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExperienceAllPropertiesEquals(Experience expected, Experience actual) {
        assertExperienceAutoGeneratedPropertiesEquals(expected, actual);
        assertExperienceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExperienceAllUpdatablePropertiesEquals(Experience expected, Experience actual) {
        assertExperienceUpdatableFieldsEquals(expected, actual);
        assertExperienceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExperienceAutoGeneratedPropertiesEquals(Experience expected, Experience actual) {
        assertThat(expected)
            .as("Verify Experience auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExperienceUpdatableFieldsEquals(Experience expected, Experience actual) {
        assertThat(expected)
            .as("Verify Experience relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getCompany()).as("check company").isEqualTo(actual.getCompany()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getLogoCompany()).as("check logoCompany").isEqualTo(actual.getLogoCompany()))
            .satisfies(e ->
                assertThat(e.getLogoCompanyContentType())
                    .as("check logoCompany contenty type")
                    .isEqualTo(actual.getLogoCompanyContentType())
            )
            .satisfies(e -> assertThat(e.getInProgress()).as("check inProgress").isEqualTo(actual.getInProgress()))
            .satisfies(e -> assertThat(e.getContract()).as("check contract").isEqualTo(actual.getContract()))
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExperienceUpdatableRelationshipsEquals(Experience expected, Experience actual) {
        assertThat(expected)
            .as("Verify Experience relationships")
            .satisfies(e -> assertThat(e.getExpertise()).as("check expertise").isEqualTo(actual.getExpertise()));
    }
}
